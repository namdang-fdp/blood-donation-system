on:
  workflow_dispatch:
  push:
    branches: main
    paths-ignore:
      - "**.md"
      - ".github/**"
  pull_request:
    branches: main
    paths-ignore:
      - "**.md"
      - ".github/**"

permissions:
  contents: read

jobs:
  clippy-fmt:
    name: Check Clippy and rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy, rustfmt
      - uses: Swatinem/rust-cache@v2
      - name: Check Clippy
        run: cargo clippy --workspace -- -D warnings
      - name: Check rustfmt
        run: cargo fmt --all -- --check

  test:
    runs-on: ${{ matrix.os }}
    env:
      PGHOST: localhost
      PGDATABASE: test
      PGUSERNAME: test
      PGPASSWORD: test
      DATABASE_URL: postgres://test:test@localhost/test
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            toolchain: stable
          - os: macos-latest
            target: x86_64-apple-darwin
            toolchain: stable
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            toolchain: stable
    steps:
      - uses: actions/checkout@v4
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          target: ${{ matrix.target }}
          toolchain: ${{ matrix.toolchain }}
      - run: ${{ matrix.deps }}
      - name: Add PostgreSQL binaries to PATH
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "$PGBIN" >> $GITHUB_PATH
          elif [ "$RUNNER_OS" == "Linux" ]; then
            echo "$(pg_config --bindir)" >> $GITHUB_PATH
          fi
      - name: Start preinstalled PostgreSQL
        shell: bash
        run: |
          echo "Initializing database cluster..."

          # Convert backslashes to forward slashes in RUNNER_TEMP for Windows Git Bash
          export PGHOST="${RUNNER_TEMP//\\//}/postgres"
          export PGDATA="$PGHOST/pgdata"
          mkdir -p "$PGDATA"

          # initdb requires file for password in non-interactive mode
          export PWFILE="$RUNNER_TEMP/pwfile"
          echo "postgres" > $PWFILE
          initdb --pgdata="$PGDATA" --username="postgres" --pwfile="$PWFILE"

          echo "Starting PostgreSQL..."
          echo "unix_socket_directories = '$PGHOST'" >> "$PGDATA/postgresql.conf"
          pg_ctl start

          echo "Creating user..."
          psql --host "$PGHOST" --username="postgres" --dbname="postgres" --command="CREATE USER $PGUSERNAME PASSWORD '$PGPASSWORD'" --command="\du"

          echo "Creating database..."
          createdb --owner="$PGUSERNAME" --username="postgres" "$PGDATABASE"
          psql -d blood-donation -a -f schema.sql
      - uses: Swatinem/rust-cache@v2
      - name: Test
        run: |
          cargo test --target ${{ matrix.target }}
